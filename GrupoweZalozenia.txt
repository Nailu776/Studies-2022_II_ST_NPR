# Wspólne rozwiązanie z resztą grupy

# Komunikacja ZMQ: PUB-SUB

# Założenie - token wygląda następująco: 
# (znak '|' służy tylko rozdzieleniu poszczególnych składowych tokenu)
# |rozmiar(kolejki)|kolejka Q|
# |rozmiar(tablicy)|tablica LN|
# |rozmiar(zmiennych współdzielonych)|zmienne współdzielone|
# gdzie rozmiar ma ustaloną wielkość 32 bitów i oznacza rozmiar obiektu w nawiasach ()

# KOMUNIKATY:
#   REQUEST: 
#       - wysłanie swojego ID oraz swojej wartości RNi[i]
#   TOKEN:
#       - wysłanie tokenu pierwszemu procesowi z kolejki Q

# Implementacja tokenu:
# Funkcja do konwersji obiektu
def conv_obj(Qsize, Q, LNsize, LN, SDsize, SD, to_token=True):
    pass
# Funkcja do konwersji tokenu 
def conv_token():
    pass


# # Do spójności rozwiązania z rozwiązaniami kolegów:
# # TODO: Wspólne komunikaty (z resztą grupy) do testowania między językami!
# # Przesyłana wiadomość - token albo aktualizacja RNi
# class ExchangeMsg():
#     # Przesyłanie tokenu --> rni is None, 
#     # a przesyłanie RNi[i] --> rni is not None
#     def __init__(self, rcvfrom, Qsize=None, Q=None, LNsize=None, LN=None, 
#         SDsize=None, SD=None, sendto=None, rni=None):
#         # Kto wysyła wiadomość - od kogo ją odbierzemy
#         self.rcvfrom = rcvfrom
#         # Czy wysyłamy RNi[i]
#         if rni is not None:
#             self.rni = rni
#             self.Qsize = None
#             self.Q = None
#             self.LNsize = None
#             self.LN = None
#             self.SDsize = None
#             self.SD = None
#             self.sendto = None # ALL
#         # Czy wysyłamy token w przeciwnym wypadku
#         else: # If rni is None
#             self.Qsize = Qsize
#             self.Q = Q
#             self.LNsize = LNsize
#             self.LN = LN
#             self.SDsize = SDsize
#             self.SD = SD
#             # Wyspecyfikowanego współpracownika
#             self.sendto = sendto 
#             self.rni = None
W funkcji send_token:

        # TODO: Wspólne komunikaty (z resztą grupy) do testowania między językami!
        # snd_msg = ExchangeMsg(rcvfrom=self.my_id, 
        #     Qsize=self.Q.__sizeof__, Q=self.Q, 
        #     LNsize=self.LN.__sizeof__, LN=self.LN, 
        #     SDsize=self.shared_obj.__sizeof__, SD=self.shared_obj,
        #     sendto=receiver)
        # Tworzenie komunikatu    